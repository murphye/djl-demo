plugins {
    id "java-library"
}

group "com.example"
version "1.0-SNAPSHOT"

repositories {
    jcenter()
}

dependencies {
    implementation "ai.djl.mxnet:mxnet-model-zoo:0.5.0"
    implementation "ai.djl.mxnet:mxnet-model-zoo:0.5.0"
    // implementation "ai.djl.aws:aws-ai:0.5.0"

    implementation "com.amazonaws:aws-lambda-java-core:1.2.1"

    runtimeOnly "org.slf4j:slf4j-simple:1.7.29"
    runtimeOnly "ai.djl.mxnet:mxnet-native-auto:1.7.0-a"

    testImplementation 'org.testng:testng:6.14.3'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

test {
    doFirst {
        if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
            jvmArgs = [
                    '--add-opens', "java.base/jdk.internal.loader=ALL-UNNAMED"
            ]
        }
    }

    useTestNG() {
        // suiteXmlFiles << new File(rootDir, "testng.xml") //This is how to add custom testng.xml
    }

    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}
configure(this) {
    apply from: file("${rootProject.projectDir}/../tools/gradle/formatter.gradle")
}

task buildZip(type: Zip, dependsOn: jar) {
    archiveFileName = getArchivesBaseName() + ".zip"
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}
build.dependsOn buildZip

task deploy(type: Exec, dependsOn: buildZip) {
    executable "./deploy.sh"
}
